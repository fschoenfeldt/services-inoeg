// Kiebitz - Privacy-Friendly Appointment Scheduling
// Copyright (C) 2021-2021 The Kiebitz Authors
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version. Additional terms
// as defined in section 7 of the license (e.g. regarding attribution)
// are specified at https://kiebitz.eu/en/docs/open-source/additional-terms.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

package crypto

import (
	"crypto/ecdsa"
	"encoding/json"
)

type ECDHEncryptedData struct {
	IV        []byte `json:"iv"`
	Data      []byte `json:"data"`
	PublicKey []byte `json:"publicKey"`
}

func (e *ECDHEncryptedData) Sign(key *Key) (*SignedData, error) {
	if data, err := json.Marshal(e); err != nil {
		return nil, err
	} else {
		return key.Sign(data)
	}
}

func pad(bytes []byte, n int) []byte {
	for len(bytes) < n {
		// we pad the number with zeros, most significant bits first!
		bytes = append([]byte{byte(0)}, bytes...)
	}
	return bytes

}

// Derives a key from a public and private ECDSA key pair. The derived key is
// compatible to the one generated by the subtle crypto API
func DeriveKey(publicKey *ecdsa.PublicKey, privateKey *ecdsa.PrivateKey) []byte {
	a, _ := publicKey.Curve.ScalarMult(publicKey.X, publicKey.Y, privateKey.D.Bytes())
	return pad(a.Bytes(), 32)
}
